{
  "key": "value",
  "another_key": "Another value goes here.",
  "a_number_value": 100,
  "scientific_notation": 1000000000000,
  "boolean": true,
  "null_value": null,
  "key with spaces": "value",
  "however": "A string, enclosed in quotes.",
  "Keys can be quoted too.": "Useful if you want to put a ':' in your key.",
  "single quotes": "have 'one' escape pattern",
  "double quotes": "have many: \", \u0000, \t, â˜º, \r\n == \r\n, and more.",
  "literal_block":
    "This entire block of text will be the value of the 'literal_block' key,\nwith line breaks being preserved.\n\nThe literal continues until de-dented, and the leading indentation is\nstripped.\n\n    Any lines that are 'more-indented' keep the rest of their indentation -\n    these lines will be indented by 4 spaces.\n",
  "folded_style":
    "This entire block of text will be the value of 'folded_style', but this time, all newlines will be replaced with a single space.\nBlank lines, like above, are converted to a newline character.\n\n    'More-indented' lines keep their newlines, too -\n    this text will appear over two lines.\n",
  "a_nested_map": {
    "key": "value",
    "another_key": "Another Value",
    "another_nested_map": {
      "hello": "hello"
    }
  },
  "0.25": "a float key",
  "This is a key\nthat has multiple lines\n": "and this is its value",
  "Manchester United,Real Madrid": [
    "2001-01-01T00:00:00.000Z",
    "2002-02-02T00:00:00.000Z"
  ],
  "a_sequence": [
    "Item 1",
    "Item 2",
    0.5,
    "Item 4",
    {
      "key": "value",
      "another_key": "another_value"
    },
    ["This is a sequence", "inside another sequence"],
    [["Nested sequence indicators", "can be collapsed"]]
  ],
  "json_map": {
    "key": "value"
  },
  "json_seq": [3, 2, 1, "takeoff"],
  "and quotes are optional": {
    "key": [3, 2, 1, "takeoff"]
  },
  "anchored_content": "This string will appear as the value of two keys.",
  "other_anchor": "This string will appear as the value of two keys.",
  "base": {
    "name": "Everyone has same name"
  },
  "foo": {
    "name": "Everyone has same name",
    "age": 10
  },
  "bar": {
    "name": "Everyone has same name",
    "age": 20
  },
  "explicit_string": "0.5",
  "datetime": "2001-12-15T02:59:43.100Z",
  "datetime_with_spaces": "2001-12-15T02:59:43.100Z",
  "date": "2002-12-14T00:00:00.000Z",
  "gif_file": {
    "type": "Buffer",
    "data": [
      71,
      73,
      70,
      56,
      57,
      97,
      12,
      0,
      12,
      0,
      132,
      0,
      0,
      255,
      255,
      247,
      245,
      245,
      238,
      233,
      233,
      229,
      102,
      102,
      102,
      0,
      0,
      0,
      231,
      231,
      231,
      94,
      94,
      94,
      243,
      243,
      237,
      142,
      142,
      142,
      224,
      224,
      224,
      159,
      159,
      159,
      147,
      147,
      147,
      167,
      167,
      167,
      158,
      158,
      158,
      105,
      105,
      105,
      99,
      99,
      99,
      163,
      163,
      163,
      132,
      132,
      132,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      255,
      254,
      249,
      33,
      254,
      14,
      77,
      97,
      100,
      101,
      32,
      119,
      105,
      116,
      104,
      32,
      71,
      73,
      77,
      80,
      0,
      44,
      0,
      0,
      0,
      0,
      12,
      0,
      12,
      0,
      0,
      5,
      44,
      32,
      32,
      142,
      129,
      48,
      158,
      227,
      64,
      20,
      232,
      105,
      16,
      196,
      209,
      138,
      8,
      28,
      207,
      128,
      77,
      36,
      122,
      239,
      255,
      48,
      133,
      112,
      184,
      176,
      49,
      102,
      13,
      27,
      206,
      1,
      195,
      1,
      30,
      16,
      39,
      32,
      130,
      10,
      1,
      0,
      59
    ]
  },
  "set": {
    "item1": null,
    "item2": null,
    "item3": null
  },
  "or": {
    "item1": null,
    "item2": null,
    "item3": null
  },
  "set2": {
    "item1": null,
    "item2": null,
    "item3": null
  }
}
